apiVersion: v1
kind: Namespace
metadata:
  name: deployer

---

# The service account for `deployer`.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: deployer
  namespace: deployer

---

# Define a Role that has sufficient privileges to use all `deployer`
# features. Trim the role to support your use case, eg "get" and "list" access
# to deployments to monitor deployment drifts.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: deployer
rules:
- apiGroups: ["", "apps", "rbac.authorization.k8s.io", "extensions"]
  resources:
  - clusterrolebindings
  - clusterroles
  - configmaps
  - daemonsets
  - deployments
  - ingresses
  - namespaces
  - persistentvolumeclaims
  - rolebindings
  - roles
  - secrets
  - services
  - statefulsets
  verbs: ["get", "list", "update", "patch"]

---

# Assign the Role to the service account defined earlier.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: deployer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deployer
subjects:
- kind: ServiceAccount
  name: deployer
  namespace: deployer

---

apiVersion: v1
kind: Service
metadata:
  name: deployer
  namespace: deployer
  labels:
    app: deployer
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: deployer

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: deployer
  namespace: deployer
  labels:
    app: deployer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployer
  template:
    metadata:
      labels:
        app: deployer
    spec:
      serviceAccountName: deployer
      containers:
        - name: deployer
          image: olitheolix/demo:v1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
